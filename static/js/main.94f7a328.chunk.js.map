{"version":3,"sources":["assets/preloader.gif","app/utils/getAPIURL.ts","app/utils/createDatesList.ts","app/actions/types.ts","app/actions/pictureActions.ts","app/components/Main/ViewerWithDatePicker/index.tsx","app/components/Main/VideoLink/index.tsx","app/components/Main/PhotoLink/index.tsx","app/components/Main/Wrapper/index.tsx","app/actions/pictureOnPageActions.ts","app/components/PicturePage/index.tsx","app/containers/App/index.tsx","serviceWorker.ts","app/reducers/index.ts","app/reducers/reducers.ts","app/middleware/logger.ts","app/store/index.ts","index.tsx"],"names":["module","exports","getAPIURL","date","createDatesList","datesArray","nowInMs","Date","now","i","dateISOStr","toISOString","slice","push","ActionType","fetchPicture","url","dispatch","a","axios","get","res","picture","data","type","SET_PICTURE","body","Error","ViewerWithDatePicker","useDispatch","useSelector","state","storedDate","localStorage","getItem","useState","setDate","datePickerRef","useRef","error","setError","isPictureLoaded","setIsPictureLoaded","changeDateInLocalStorage","isToday","removeItem","setItem","isCorrectDate","useEffect","hidePreloaderAfterPictureLoading","defaultValue","ref","onChange","event","target","value","loadPicture","className","src","alt","spinner","to","VideoLink","props","key","href","PhotoLink","Main","picturesList","setPicturesList","pictures","getPicturesForLastTwoWeeks","length","map","media_type","fetchPictureOnPage","SET_PICTURE_ON_PAGE","PicturePage","pictureOnPage","match","params","isLoaded","setIsLoaded","getDataAndStopLoading","title","explanation","App","path","exact","component","Boolean","window","location","hostname","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.94f7a328.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.23f2f1ea.gif\";","export function getAPIURL(date: string) {\r\n    return `https://api.nasa.gov/planetary/apod?api_key=TdCcOumK7lyile0FzWeLOAa7YKBRZJL4zvnCVrUE&date=${date}`;\r\n};","export function createDatesList() {\r\n    const datesArray = [];\r\n\r\n    const nowInMs = Date.now();\r\n    const dayInMs = 86400000;\r\n\r\n    for (let i = 0; i < 14; i++) {\r\n      const date = nowInMs-dayInMs*i;\r\n      const dateISOStr = new Date(date).toISOString().slice(0,10);\r\n      datesArray.push(dateISOStr);\r\n    }\r\n\r\n    return datesArray;\r\n  }","export enum ActionType {\r\n    SET_PICTURE = \"SET_PICTURE\",\r\n    SET_PICTURE_ON_PAGE = \"SET_PICTURE_ON_PAGE\"\r\n};\r\n\r\nexport type Action = {\r\n    type: ActionType,\r\n    body: any\r\n}","import { PictureModel } from '../models';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { ActionType, Action } from './types';\r\n\r\n\r\n\r\nexport const setPicture = (picture: PictureModel) => {\r\n  return {\r\n    type: ActionType.SET_PICTURE,\r\n    body: picture\r\n  };\r\n};\r\n\r\nexport const fetchPicture = (url: string) => {\r\n  return async (dispatch: ThunkDispatch<{}, {}, Action>) => {\r\n    const res: AxiosResponse = await axios.get(url);\r\n  \r\n    try {\r\n      dispatch(setPicture(res.data));\r\n    }\r\n    catch (err) {\r\n      throw new Error(\"The request is failed.\")\r\n    }\r\n  }\r\n};\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport { RootState } from '../../../reducers';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchPicture } from '../../../actions/pictureActions';\r\nimport { getAPIURL } from '../../../utils/getAPIURL';\r\nimport spinner from '../../../../assets/preloader.gif';\r\nimport './style.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport function ViewerWithDatePicker() {\r\n    const dispatch = useDispatch();\r\n    const picture = useSelector((state: RootState) => state.picture);\r\n\r\n    const storedDate = localStorage.getItem(\"date\");\r\n    const [date, setDate] = useState(storedDate ? storedDate : new Date().toISOString().slice(0,10));\r\n\r\n    const datePickerRef = useRef(null);\r\n\r\n    const [error, setError] = useState(\"\");\r\n    const [isPictureLoaded, setIsPictureLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n      hidePreloaderAfterPictureLoading()\r\n    }, [date]);\r\n\r\n    async function hidePreloaderAfterPictureLoading() {\r\n      await dispatch(fetchPicture(getAPIURL(date)));\r\n      setIsPictureLoaded(true);\r\n    }\r\n\r\n    function changeDateInLocalStorage(isToday: boolean, date: string) {\r\n        if (isToday) {\r\n          localStorage.removeItem(\"date\");\r\n        } else {\r\n          localStorage.setItem(\"date\", date);\r\n        }\r\n    };\r\n\r\n    async function loadPicture(date: string) {\r\n      const isCorrectDate = new Date(date) <= new Date();\r\n      const isToday = new Date(date).toISOString().slice(0,10) === new Date().toISOString().slice(0,10); \r\n\r\n      if (isCorrectDate) {\r\n        setError(\"\");\r\n        changeDateInLocalStorage(isToday, date);\r\n\r\n        setIsPictureLoaded(false);\r\n        await dispatch(fetchPicture(getAPIURL(date)));\r\n        setIsPictureLoaded(true);\r\n      } else {\r\n        setError(\"You did choose the incorrenct date.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    function fetchPictureByDate(event: React.ChangeEvent<HTMLInputElement>) {\r\n      const date = event.target.value;\r\n      setDate(date);\r\n      loadPicture(date);\r\n    };\r\n\r\n    return (\r\n    <>\r\n        <p>Choose a date:</p>\r\n        <input \r\n            type=\"date\" \r\n            defaultValue={date}\r\n            ref={datePickerRef} \r\n            onChange={fetchPictureByDate}\r\n        />\r\n        <p className=\"App__Error\">{error}</p>\r\n        {\r\n          isPictureLoaded\r\n          ?\r\n          <img\r\n            src={picture.url} \r\n            className=\"App__Picture-Display\"\r\n            alt=\"NASA picture of a day\"\r\n          />\r\n          :\r\n          <img src={spinner} className=\"Preloader\" />\r\n        }\r\n        <Link to={`/picture/${picture.date}`}>Show more info</Link>\r\n    </>\r\n    );\r\n};","import React from 'react';\r\n\r\ntype Props = {\r\n    key: string,\r\n    url: string\r\n}\r\n\r\nexport function VideoLink(props: Props) {\r\n    const {key, url} = props;\r\n\r\n    return <div key={key} className=\"Size-Wrapper\">\r\n        <a href={url} target=\"_blank\" className=\"Link-To-Video\">Video</a>\r\n    </div>\r\n};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    key: string,\r\n    date: string,\r\n    url: string\r\n}\r\n\r\nexport function PhotoLink(props: Props) {\r\n    const {key, date, url} = props;\r\n\r\n    return <div key={key} className=\"Size-Wrapper\">\r\n        <Link className=\"Link-To-Picture-Info\" to={`/picture/${date}`}>\r\n            <img className=\"App__Picture-Item\" src={url} alt=\"\" />\r\n        </Link>\r\n    </div>\r\n};","import React, {useEffect, useState} from 'react';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { PictureModel } from '../../../models';\r\nimport { getAPIURL } from '../../../utils/getAPIURL';\r\nimport { createDatesList } from '../../../utils/createDatesList';\r\nimport { ViewerWithDatePicker } from '../ViewerWithDatePicker';\r\nimport { VideoLink } from '../VideoLink';\r\nimport { PhotoLink } from '../PhotoLink';\r\nimport spinner from '../../../../assets/preloader.gif';\r\nimport './style.scss';\r\n\r\n\r\nexport function Main() {\r\n    const [picturesList, setPicturesList] = useState([] as PictureModel[]);\r\n\r\n    useEffect(() => {\r\n      getPicturesForLastTwoWeeks();\r\n    }, []);\r\n\r\n    async function getPicturesForLastTwoWeeks() {\r\n      const pictures: PictureModel[] = [];\r\n      for await (let date of createDatesList()) {\r\n        const res: AxiosResponse = await axios.get(getAPIURL(date));\r\n        pictures.push(res.data);\r\n      };\r\n      try {\r\n        setPicturesList(pictures);\r\n      }\r\n      catch (err) {\r\n        throw new Error(\"The request is failed.\")\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div className=\"App\">\r\n        <h1>NASA picture of a day</h1>\r\n        <ViewerWithDatePicker />\r\n        \r\n        <h2>Pictures for last 2 weeks</h2>\r\n        <div className=\"Pictures-List\">\r\n          {\r\n            picturesList.length \r\n            ? \r\n            picturesList.map((picture: PictureModel) => {\r\n              if (picture.media_type === \"video\") {\r\n                return (\r\n                  <VideoLink \r\n                    key = {picture.date}\r\n                    url = {picture.url}\r\n                  />\r\n                );\r\n              } else if (picture.media_type === \"image\") {\r\n                return (\r\n                  <PhotoLink\r\n                    key = {picture.date}\r\n                    date = {picture.date}\r\n                    url = {picture.url}\r\n                  />\r\n                );\r\n              }\r\n            })\r\n            :\r\n            <img src={spinner} className=\"Preloader\" />\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n}","import { PictureModel } from '../models';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { ActionType, Action } from './types';\r\n\r\n\r\nexport const setPictureOnPage = (picture: PictureModel) => {\r\n  return {\r\n    type: ActionType.SET_PICTURE_ON_PAGE,\r\n    body: picture\r\n  };\r\n};\r\n\r\nexport const fetchPictureOnPage = (url: string) => {\r\n  return async (dispatch: ThunkDispatch<{}, {}, Action>) => {\r\n    const res: AxiosResponse = await axios.get(url);\r\n  \r\n    try {\r\n      dispatch(setPictureOnPage(res.data));\r\n    }\r\n    catch (err) {\r\n      throw new Error(\"The request is failed.\")\r\n    }\r\n  }\r\n};\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../reducers';\r\nimport { fetchPictureOnPage } from '../../actions/pictureOnPageActions';\r\nimport { getAPIURL } from '../../utils/getAPIURL';\r\nimport spinner from '../../../assets/preloader.gif';\r\nimport './style.scss';\r\n\r\n\r\ntype Props = {\r\n    match: {\r\n        params: {\r\n            date: string\r\n        }\r\n    }\r\n}\r\n\r\nexport function PicturePage(props: Props) {\r\n    const dispatch = useDispatch();\r\n    const picture = useSelector((state: RootState) => state.pictureOnPage);\r\n    const date = props.match.params.date;\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    async function getDataAndStopLoading() {\r\n        await dispatch(fetchPictureOnPage(getAPIURL(date)));\r\n        setIsLoaded(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDataAndStopLoading();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"Picture-Page\">\r\n            {\r\n                !isLoaded\r\n                ?\r\n                <img src={spinner} className=\"Preloader\" />\r\n                :\r\n                <>\r\n                    <h1>{picture.title}</h1>\r\n                    <img \r\n                        src={picture.url} \r\n                        className=\"Picture-Page__Picture\"\r\n                        alt=\"NASA picture of a day\" \r\n                    />\r\n                    <p>{picture.explanation}</p>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './style.scss';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { Main } from '../../components/Main/Wrapper';\r\nimport { PicturePage } from '../../components/PicturePage';\r\n\r\nexport function App() {\r\n  return (\r\n    <main className=\"App-Container\">\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Main} />\r\n        <Route path=\"/picture/:date\" exact component={PicturePage} />\r\n      </Switch>\r\n    </main>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { pictureReducer, pictureOnPageReducer } from './reducers';\r\nimport { PictureModel } from '../models';\r\n\r\nexport interface RootState {\r\n  picture: PictureModel,\r\n  pictureOnPage: PictureModel\r\n}\r\n\r\nexport const rootReducer = combineReducers<RootState>({\r\n  picture: pictureReducer,\r\n  pictureOnPage: pictureOnPageReducer\r\n});\r\n","import { ActionType, Action } from '../actions/types';\r\nimport { PictureModel } from '../models';\r\n\r\nexport function pictureReducer(state: PictureModel = {} as PictureModel, action: Action) {\r\n    switch (action.type) {\r\n        case ActionType.SET_PICTURE:\r\n            return {...action.body};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport function pictureOnPageReducer(state: PictureModel = {} as PictureModel, action: Action) {\r\n    switch (action.type) {\r\n        case ActionType.SET_PICTURE_ON_PAGE:\r\n            return {...action.body};\r\n        default:\r\n            return state;\r\n    }\r\n};","import {createLogger} from 'redux-logger';\r\n\r\nexport const logger = createLogger();\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer } from '../reducers';\r\nimport { logger, thunk } from '../middleware';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app/containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { RootState } from './app/reducers';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}